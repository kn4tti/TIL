# **Layered Architecture**

시스템을 기능별로 여러 계층으로 분리하여 설계하는 방식

- **관심사의 분리**를 위해 사용한다.
- 각 계층은 자신의 역할에만 집중한다.
- 추상화된 인터페이스로 하위 계층에 요청을 보내는 방식으로 소통한다.
(자신보다 상위 계층이나, 인접하지 않은 계층에는 요청하지 못한다.)

---

# **Layered Architecture의 계층**

- **단방향 의존성** : 하위 계층은 상위 계층을 몰라야 한다.

### **Presentation Layer | Controller**

사용자 또는 클라이언트로의 요청에 맞는 서비스로 연결해주는 계층이다.

### **Bussiness Layer [](https://xxeol.tistory.com/26#Business%20Layer-1)| Service**

비즈니스 로직이 구현되는 계층이다. 구현해야 하는 핵심 로직을 담당한다.
Presentation Layer로부터 전달받은 요청을 실질적으로 처리한다.

### **Persistence Layer | Repository**

데이터베이스와 통신하는 계층이다.

### **Database Layer**

실제 데이터베이스를 뜻한다.

---

# 관심사의 분리

### **관심사의 분리**

소프트웨어 시스템에서 서로 다른 기능이나 역할을 명확하게 분리하는 설계 원칙
→ 응집도를 높이고 결합도는 낮춘다

### 계**층형 아키텍쳐에서의 중요성**

- **유지보수 용이**
각 기능이 독립적으로 관리되기 때문에 변경 사항이 발생했을 때 전체 시스템에 미치는 영향을 최소화할 수 있다.
- **재사용성**
기능별로 모듈화된 코드는 다른 프로젝트에서도 재사용 하기 쉽다.
- **확장성**
새로운 기능 추가 시 기존 모듈과 독립적으로 개발할 수 있어 확장이 용이하다.
- **테스트 용이성**
각 모듈이 독립적이므로 단위 테스트를 진행하기가 수월하다.

모듈 : 각 기능별로 쪼개어진 코드 묶음

응집도 : 한 모듈의 구성 요소가 얼마나 하나의 목적을 위해 뭉쳐있는지
결합도 : 각 모듈이 서로 얼마나 강하게 의존하고 있는지
